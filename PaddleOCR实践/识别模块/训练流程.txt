1.数据准备

    数据集目录结构：

    |-PaddleOCR-develop\train_data
        |-SY
            |- rec_gt_train.txt
            |- rec_gt_train.txt
            |- train
                |- word_001.png
                |- word_002.jpg
                |- word_003.jpg
                | ...
            |- test
                |- word_001.png
                |- word_002.jpg
                |- word_003.jpg
                | ...

    训练图片放入文件夹train_images，txt文件rec_gt_train.txt记录图片路径和标签。
    注意：图片路径和图片标签用 \t 分割
    ***
    dzh_-02.jpg	-02
    dzh_-1114.jpg	-1114

    最后需要提供一个字典（{word_dict_name}.txt），使模型在训练时，可以将所有出现的字符映射为字典的索引。
    因此字典需要包含所有希望被正确识别的字符，{word_dict_name}.txt需要写成如下格式，并以 utf-8 编码格式保存：

    l
    d
    a
    d
    r
    n

    word_dict.txt 每行有一个单字，将字符与数字索引映射在一起，“and” 将被映射成 [2 5 1]
    ppocr/utils/ppocr_keys_v1.txt 是一个包含6623个字符的中文字典， ppocr/utils/ic15_dict.txt 是一个包含36个字符的英文字典， 可以按需使用。
    自定义字典：如需自定义dic文件，在 configs/rec/rec_icdar15_train.yml 中添加 character_dict_path 字段, 指向自己的字典路径。 并将 character_type 设置为 ch。
    添加空格类别：如果希望支持识别"空格"类别, 将yml文件中的 use_space_char 字段设置为 true。
    注意：use_space_char 仅在 character_type=ch 时生效


2.修改参数
    主要在PaddleOCR-develop\configs\rec以下两个文件中进行参数修改：
    rec_icdar15_reader.yml
    --主要修改训练文件的读取地址
    rec_icdar15_train.yml
    --主要修改训练模型的具体参数
      pretrain_weights: ./pretrain_models/MobileNetV3_large_x0_5_pretrained    预训练模型
      checkpoints: ./pretrain_models/rec_mv3_crnn/best_accuracy                断点加训模型
      infer_img: ./tools/infer_recimg                                          结果图片
      character_dict_path: ./ppocr/utils/ppocr_keys_v1.txt                     字典txt
      cpu版本，将配置文件中的 use_gpu 字段修改为false

    # GPU训练 支持单卡，多卡训练，通过CUDA_VISIBLE_DEVICES指定卡号
    export CUDA_VISIBLE_DEVICES=0,1,2,3


3.下载预训练模型
    下载pretrain model
    cd PaddleOCR/
    # 下载MobileNetV3的预训练模型
    wget -P ./pretrain_models/ https://paddleocr.bj.bcebos.com/rec_mv3_none_bilstm_ctc.tar
    # 解压模型参数
    cd pretrain_models
    tar -xf rec_mv3_none_bilstm_ctc.tar && rm -rf rec_mv3_none_bilstm_ctc.tar
    我放在了pretrain_models\MobileNetV3_large_x0_5_pretrained目录下，如果发现文件有270个，不要惊慌，就是这么多。


4.开始训练：
    python3 tools/train.py -c configs/rec/rec_icdar15_train.yml
    懒得用在控制台敲字可以修改tools/program.py 的默认参数：
    self.add_argument("-c", "--config", default='configs/rec/rec_icdar15_train.yml', type=str, help="configuration file to use")
    # 预测
    self.add_argument("-o", "--opt", nargs='+', default=[r'Global.checkpoints=E:\PaddleOCR-develop\output\rec_CRNN\best_accuracy'], 
                      type=list, help="set configuration options")
    # 训练
    self.add_argument("-o", "--opt", nargs='+', help="set configuration options")
    训练的时候注释掉预测部分，反之亦然。
    启用CPU多线程，在train.py的开头位置加上：os.environ['CPU_NUM'] = str(2)

    数据增强：
    PaddleOCR提供了多种数据增强方式，如果您希望在训练时加入扰动，请在配置文件中设置 distort: true。
    默认的扰动方式有：颜色空间转换(cvtColor)、模糊(blur)、抖动(jitter)、噪声(Gasuss noise)、随机切割(random crop)、透视(perspective)、颜色反转(reverse)。
    训练过程中每种扰动方式以50%的概率被选择，具体代码实现请参考：img_tools.py
    由于OpenCV的兼容性问题，扰动操作暂时只支持GPU、GPU、GPU、GPU

    PaddleOCR支持训练和评估交替进行, 可以在 configs/rec/rec_icdar15_train.yml 中修改 eval_batch_step 设置评估频率，默认每500个iter评估一次。
    评估过程中默认将最佳acc模型，保存为output/rec_CRNN/best_accuracy


5.断点加训：
    只需要将rec_icdar15_train.yml中的checkpoints参数修改为自己训练模型的位置即可。


6.测试结果：
    运行tools\infer\predict_rec.py，默认参数在同级目录的utility.py中修改即可，十分友好。

7.转换模型：
    tools\export_model.py




